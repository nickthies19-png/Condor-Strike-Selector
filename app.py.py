# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14lV4850MHK6XLIYbbw0GLlzhYy7gvwn7
"""

import streamlit as st
import yfinance as yf
import numpy as np
from scipy.stats import norm
from datetime import datetime

# ----------------------------
# FUNCTIONS
# ----------------------------
def black_scholes_delta(S, K, T, r, sigma, option_type='call'):
    """Calculate the true Black-Scholes delta for a call or put."""
    d1 = (np.log(S/K) + (r + 0.5*sigma**2)*T) / (sigma*np.sqrt(T))
    if option_type == 'call':
        return norm.cdf(d1)   # call delta
    else:
        return norm.cdf(d1) - 1  # put delta

def pot_from_delta(S, K, T, r, sigma, option_type='call'):
    delta = black_scholes_delta(S, K, T, r, sigma, option_type)
    return min(1, abs(delta) * 2)

# ----------------------------
# STREAMLIT UI
# ----------------------------

st.title("Condor/Short Call/Short Put Probability of Touch Calculator")
st.caption("This tool estimates the probability that the underlying's price will touch your short strike(s) at any time before the contracts expire. Note- the probability of your short strike being touched before expiry is not the same as the probability of your short strike expiring in-the-money. To view probability of your short strike expiring in-the-money, reference the Delta of the contract. A delta of .35 = a 35% chance of the contract expiring in-the-money.")

# Sidebar Inputs
with st.sidebar:
    st.sidebar.header("Inputs")
    # Strategy selection
    strategy = st.sidebar.selectbox("Select Strategy", ["Iron Condor", "Short Put", "Short Call"])
    # Ticker input
    ticker_symbol = st.sidebar.text_input("Ticker Symbol", "^NDX")
    st.caption("Enter a stock/ETF ticker (e.g. TSLA) or index symbol (e.g. ^NDX for NASDAQ‚Äë100, ^SPX for S&P 500).")
    # % OTM Selection
    pct_OTM_input = st.sidebar.number_input("Percent OTM)", value=2.0, step=0.1, format="%.1f") # stores default value of 2%, converts decimal to % for more natural user experience
    st.caption("Define the distance from current price for your short strikes. If you input 2%, the calculatro will suggest short call and short put strikes approx. 2% out-of-the-money")
    pct_OTM = pct_OTM_input / 100 # converts to decimal for Black-Scholes math
    # Days  to expiration input
    days_to_expiration = st.sidebar.number_input("Days to Expiration", value=2, step=1)
    st.caption("Number of calendar days until the option expires")
    # Risk-free rate input
    risk_free_rate_input = st.sidebar.number_input("Risk-Free Rate (decimal)", value=5.0, step=0.1, format="%.1f") # stores default value of 5%, converts decimal to % for more natural user experience
    st.caption("The risk‚Äëfree rate represents the theoretical return of a zero‚Äërisk investment, often modeled using short‚Äëterm U.S. Treasury bill yields (currently around 5%).")
    risk_free_rate = risk_free_rate_input / 100   # converts to decimal for Black-Scholes math

    agree=st.checkbox("Show Stats for Suggested Strikes")
    
    st.sidebar.markdown("---")
    st.sidebar.write("Change inputs and the calculator updates instantly.")

# ----------------------------
# DATA FETCHING
# ----------------------------
try:
    ticker = yf.Ticker(ticker_symbol)
    S = ticker.info.get('regularMarketPrice', None)

    if S is None:
        st.error("‚ö†Ô∏è Could not fetch live price for this ticker.")
        st.stop()

    # Find the next available expiration date
    expirations = ticker.options
    if not expirations:
        st.error("‚ö†Ô∏è No options data found for this ticker.")
        st.stop()

    expiration_date = expirations[0]

    # Pull the option chain for that date
    opt_chain = ticker.option_chain(expiration_date)
    calls = opt_chain.calls
    puts = opt_chain.puts

    # Target strikes (rounded to nearest 10)
    call_target = round(S * (1 + pct_OTM) / 10) * 10
    put_target = round(S * (1 - pct_OTM) / 10) * 10

    call_strike = calls['strike'].iloc[(calls['strike'] - call_target).abs().argsort()[0]]
    put_strike = puts['strike'].iloc[(puts['strike'] - put_target).abs().argsort()[0]]
    
    # Get full row for the selected strikes
    call_row = calls[calls['strike'] == call_strike]
    put_row = puts[puts['strike'] == put_strike]


    #get implied volatility for suggested strikes
    call_iv = calls.loc[calls['strike'] == call_strike, 'impliedVolatility'].iloc[0]
    put_iv = puts.loc[puts['strike'] == put_strike, 'impliedVolatility'].iloc[0]

    #get open interest for suggested strikes
    call_volume = call_row['volume'].iloc[0]
    put_volume = put_row['volume'].iloc[0]

    #get volume for suggested strikes
    put_oi = put_row['openInterest'].iloc[0]
    call_oi = call_row['openInterest'].iloc[0]

    #get bid/ask for suggested strikes
    put_bid = put_row['bid'].iloc[0]
    put_ask = put_row['ask'].iloc[0]
    call_bid = call_row['bid'].iloc[0]
    call_ask = call_row['ask'].iloc[0]
    

    # Calculate time to expiration in years
    T = days_to_expiration / 365.0

    # Calculate POT for each leg
    call_pot = pot_from_delta(S, call_strike, T, risk_free_rate, call_iv, 'call')
    put_pot = pot_from_delta(S, put_strike, T, risk_free_rate, put_iv, 'put')

    # Combined probabilities
    prob_either_touch = call_pot + put_pot - (call_pot * put_pot)
    prob_neither_touch = 1 - prob_either_touch

    # ----------------------------
    # DISPLAY RESULTS
    # ----------------------------
     # First row of boxes (Strategy Results | Underlying Info)
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìä Strategy Results")
        if strategy == "Iron Condor":
            st.write(f"**Suggested Short Call Strike:** {call_strike}")
            st.write(f"**Suggested Short Put Strike:** {put_strike}")
            st.write(f"**Probability of Touch (Call):** {call_pot:.1%}")
            st.write(f"**Probability of Touch (Put):** {put_pot:.1%}")
            st.write(f"**Probability Neither Strike Touches:** {prob_neither_touch:.1%}")
            st.markdown("---")

        elif strategy == "Short Put":
            st.write(f"**Suggested Short Put Strike:** {put_strike}")
            st.write(f"**Probability of Touch (Put):** {put_pot:.1%}")
    
        elif strategy == "Short Call":
            st.write(f"**Suggested Short Call Strike:** {call_strike}")
            st.write(f"**Probability of Touch (Call):** {call_pot:.1%}")
            st.markdown("---")
    
    with col2:
        st.markdown("### üìà Underlying Info")
        st.write(f"**{ticker_symbol} Current Value:** {S:,.2f}")
        st.write(f"**Strategy Expiry:** {expiration_date} ({days_to_expiration} DTE)")

    # Second row of boxes (Short Call Stats | Short Put Stats)
    if agree:
        col3, col4 = st.columns(2)
    
        with col3:
            st.markdown("### üìâ Short Call Stats")
            if strategy in ["Iron Condor", "Short Call"]:
                st.write(f"**IV:** {call_iv:.2%}")
                st.write(f"**Volume:** {call_volume}")
                st.write(f"**Open Interest:** {call_oi}")
                st.write(f"**Bid:** {call_bid}")
                st.write(f"**Ask:** {call_ask}")
            else:
                st.info("No Short Call position for this strategy.")
    
        with col4:
            st.markdown("### üìà Short Put Stats")
            if strategy in ["Iron Condor", "Short Put"]:
                st.write(f"**IV:** {put_iv:.2%}")
                st.write(f"**Volume:** {put_volume}")
                st.write(f"**Open Interest:** {put_oi}")
                st.write(f"**Bid:** {put_bid}")
                st.write(f"**Ask:** {put_ask}")
            else:
                st.info("No Short Put position for this strategy.")

    st.markdown("---")
    st.caption("POT is calculated using the Black-Scholes model, along with the assumptions this model makes. Actual outcomes depend on volatility, news, and market conditions.")
    st.caption("Disclaimer: This tool is for educational and informational purposes only. It is not financial advice, and nothing displayed here should be taken as a recommendation to buy or sell any security or options contract. Market data is provided by Yahoo Finance and may be delayed or inaccurate. Options trading involves significant risk and is not suitable for all investors. You are solely responsible for any financial decisions made based on the information from this tool.")

except Exception as e:
    st.error(f"An error occurred: {e}")
